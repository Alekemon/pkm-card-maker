{"version":3,"sources":["components/FormElements/Form.module.scss","components/CardDisplay/CardDisplay.module.scss","components/FormElements/EnergyPicker/EnergyPicker.module.scss","App.module.scss","actions.ts","reducers/cardOptions.ts","reducers/index.ts","services.ts","api.ts","sagas.ts","store.ts","components/CardDisplay/Trainer.tsx","components/CardDisplay/Energy.tsx","components/CardDisplay/Pokemon.tsx","components/CardDisplay/index.tsx","components/FormElements/InputLabel/index.tsx","components/FormElements/Checkbox/index.tsx","components/FormElements/EnergyPicker/index.tsx","components/FormElements/ImageInput/index.tsx","components/FormElements/Input/index.tsx","components/FormElements/Select/index.tsx","cropImage.ts","pages/CardCreator/index.tsx","App.tsx","serviceWorker.ts","index.tsx","pages/CardCreator/CardCreator.module.scss"],"names":["module","exports","requestCardOptions","type","requestCardOptionsSuccess","cardOptions","payload","initialState","isLoading","error","baseSets","rarities","sets","subtypes","types","variations","rotations","rarityIcons","combineReducers","state","action","console","errorMessage","relativePathPrefix","path","process","cardOptionsToImage","options","folder","supertype","filePath","Object","values","forEach","param","i","undefined","rarity","variation","getCardImage","imagePath","baseSet","subtype","getCardOptions","a","fetch","response","json","fetchCardOptions","mySaga","call","put","takeLatest","sagaMiddleware","createSagaMiddleware","createStore","reducer","composeWithDevTools","applyMiddleware","run","TrainerCard","name","description","subname","className","styles","formatText","descriptionWrapper","hasSubname","EnergyCard","typeImage","hasSpecialStyle","descriptionWrapperEnergy","src","shortName","typeImageSpecial","alt","PokemonCard","card","useEffect","moves","highestCost","move","totalAmount","energyCost","amount","moveNames","document","querySelectorAll","initialLeft","moveNameLeft","substr","length","moveName","style","left","Math","max","namePokemon","hasNameOutline","nameOutline","hasVSymbol","nameIcon","hasVMaxSymbol","hitpointsWrapper","hasVStyle","hitpointsWrapperV","hitpointsHP","hitpoints","hasPrevolve","prevolveName","hasPokedexEntry","pokedexEntry","movesWrapper","movesWrapperV","ability","abilityNameWrapper","abilityIcon","abilityIconV","abilityText","text","map","key","moveMultiple","moveV","moveNameWrapper","moveCost","moveImages","moveType","returnValue","push","moveEnergy","formatMoveCost","moveDamage","damage","moveText","moveTextV","typeBar","hasBlackTopText","hasWhiteTopText","whiteText","weaknessType","weakness","weaknessIcon","weaknessAmount","resistanceType","resistance","resistanceIcon","resistanceAmount","retreatCost","Array","from","e","retreatCostIcon","noDescription","descriptionWrapperPokemon","prevolveImage","prevolveImageWrapper","CardDisplay","useState","setImagePath","set","newImage","hasWhiteText","id","backgroundImage","Trainer","Energy","Pokemon","cardInfoWhite","illustrator","customSetIcon","setIcon","number","rotation","setNumber","cardNumber","totalInSet","rarityIcon","imageLayer1","image","imageLayer2","chars","match","charsArr","char","replace","textNoChars","split","returnText","textElm","italicText","ptcgText","InputLabel","horizontal","buttons","children","htmlFor","input","inputLabel","button","icon","title","inputLabelButton","onClick","preventDefault","Checkbox","checked","setter","onChange","currentTarget","inputField","EnergyPicker","label","setMoveCost","moveTypes","setMoveTypes","newMoveTypes","wrapper","newMoveCost","find","faChevronUp","splice","indexOf","faChevronDown","ImageInput","info","croppable","cropperSetter","setImage","inputRef","useRef","acceptedTypes","faCropAlt","faTimes","current","value","ref","target","files","includes","window","URL","createObjectURL","accept","join","Input","min","inputTextarea","Select","selectRef","createImage","url","Promise","resolve","reject","Image","addEventListener","setAttribute","getCroppedImg","imageSrc","pixelCrop","canvas","createElement","ctx","getContext","maxSize","width","height","safeArea","sqrt","translate","drawImage","data","getImageData","putImageData","x","y","toBlob","file","connect","cardOptionsState","dispatch","bindActionCreators","importingCard","initialImported","importingTrigger","setImportingTrigger","setSupertype","setType","setBaseSet","setSet","setRotation","setVariation","setSubtype","setRarity","setRarityIcon","setWeaknessType","setResistanceType","baseSetRef","supertypeRef","typeRef","subtypeRef","variationRef","rarityRef","setIconRef","rotationRef","rarityIconRef","weaknessTypeRef","resistanceTypeRef","setName","setPrevolveName","setHitpoints","setSubname","setPokedexEntry","setWeaknessAmount","setResistanceAmount","setRetreatCost","setDescription","setIllustrator","setCardNumber","setTotalInSet","setBackgroundImage","setImageLayer1","setImageLayer2","setTypeImage","setPrevolveImage","hasCustomSetIcon","setHasCustomSetIcon","setCustomSetIcon","cropArea","setCropArea","cropZoom","setCropZoom","cropImage","setCropImage","croppedAreaPixels","setCroppedAreaPixels","currentCropSetter","setCurrentCropSetter","hasAbility","setHasAbility","abilityName","setAbilityName","setAbilityText","move1Name","setMove1Name","move1Damage","setMove1Damage","move1Text","setMove1Text","move1Cost","setMove1Cost","hasSecondMove","setHasSecondMove","move2Name","setMove2Name","move2Text","setMove2Text","move2Damage","setMove2Damage","move2Cost","setMove2Cost","selectedIndex","newType","newSubtype","newVariation","newRarity","makeCard","importCard","cardObj","reduce","result","typeId","newBaseSet","baseSetId","findIndex","t","newSupertype","subtypeId","setId","newSet","weaknessTypeId","newWeaknessType","resistanceTypeId","newResistanceType","rotationId","newRotation","variationId","rarityId","rarityIconId","newRarityIcon","resetCropper","imageSetter","form","navigator","clipboard","readText","then","JSON","parse","catch","seperator","hasSubtypes","subtypeOptional","hasVariations","includesType","includesSubtype","includesVariation","disabled","cropperWrapper","crop","zoom","cropSize","maxZoom","minZoom","restrictPosition","zoomSpeed","aspect","onCropChange","location","onCropComplete","croppedArea","cap","onZoomChange","newZoom","cropperImage","croppedImage","getElementById","htmlToImage","toPng","dataUrl","download","exportCard","cardToImportedCard","writeText","stringify","cardWrapper","cardImagePreview","App","store","header","headerCircle","content","exact","CardCreator","footer","Boolean","hostname","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8dc95e6c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Form_input__GBXSi\",\"horizontal\":\"Form_horizontal__2UtlA\",\"inputField\":\"Form_inputField__1HngE\",\"inputLabel\":\"Form_inputLabel__322yj\",\"inputLabelButton\":\"Form_inputLabelButton__DsbXy\",\"inputTextarea\":\"Form_inputTextarea__3XaZo\",\"info\":\"Form_info__3KnDV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"moveNameLeft\":\"29.5%\",\"ptcgText\":\"CardDisplay_ptcgText__1MAix\",\"italicText\":\"CardDisplay_italicText__1QKFc\",\"card\":\"CardDisplay_card__1XFzg\",\"whiteText\":\"CardDisplay_whiteText__3iIoF\",\"name\":\"CardDisplay_name__2Lp78\",\"namePokemon\":\"CardDisplay_namePokemon__4BM6Q\",\"nameOutline\":\"CardDisplay_nameOutline__1b7MD\",\"nameIcon\":\"CardDisplay_nameIcon__1q13W\",\"hitpoints\":\"CardDisplay_hitpoints__2ZXbp\",\"hitpointsWrapper\":\"CardDisplay_hitpointsWrapper__2ZDHS\",\"hitpointsWrapperV\":\"CardDisplay_hitpointsWrapperV__Z4EvZ\",\"hitpointsHP\":\"CardDisplay_hitpointsHP__73v1W\",\"prevolveName\":\"CardDisplay_prevolveName__134Di\",\"subname\":\"CardDisplay_subname__3F0pF\",\"pokedexEntry\":\"CardDisplay_pokedexEntry__59fzz\",\"movesWrapper\":\"CardDisplay_movesWrapper__1J4k2\",\"movesWrapperV\":\"CardDisplay_movesWrapperV__-s-lu\",\"abilityNameWrapper\":\"CardDisplay_abilityNameWrapper__p-cBp\",\"abilityIcon\":\"CardDisplay_abilityIcon__2XYwJ\",\"abilityIconV\":\"CardDisplay_abilityIconV__2Ozqw\",\"abilityText\":\"CardDisplay_abilityText__VDFJ6\",\"move\":\"CardDisplay_move__66xJF\",\"moveMultiple\":\"CardDisplay_moveMultiple__2ta0Q\",\"moveV\":\"CardDisplay_moveV__187Ns\",\"moveName\":\"CardDisplay_moveName__2Umut\",\"moveNameWrapper\":\"CardDisplay_moveNameWrapper__wUKlI\",\"moveNameShoved\":\"CardDisplay_moveNameShoved__2XB7i\",\"moveCost\":\"CardDisplay_moveCost__jLtGU\",\"moveEnergy\":\"CardDisplay_moveEnergy__A5hMX\",\"moveDamage\":\"CardDisplay_moveDamage__i06G_\",\"moveText\":\"CardDisplay_moveText__3C_v4\",\"moveTextV\":\"CardDisplay_moveTextV__1rkAy\",\"typeBar\":\"CardDisplay_typeBar__18jtt\",\"weakness\":\"CardDisplay_weakness__YQq3m\",\"weaknessIcon\":\"CardDisplay_weaknessIcon__3CynA\",\"resistance\":\"CardDisplay_resistance__2bkTi\",\"resistanceIcon\":\"CardDisplay_resistanceIcon__P-0Py\",\"retreatCost\":\"CardDisplay_retreatCost__2lpKE\",\"retreatCostIcon\":\"CardDisplay_retreatCostIcon__1z8qn\",\"illustrator\":\"CardDisplay_illustrator__235hf\",\"setIcon\":\"CardDisplay_setIcon__1aFAc\",\"setNumber\":\"CardDisplay_setNumber__17ac3\",\"rotation\":\"CardDisplay_rotation__3ry_3\",\"rarityIcon\":\"CardDisplay_rarityIcon__1G7BB\",\"cardInfoWhite\":\"CardDisplay_cardInfoWhite__3lNt0\",\"description\":\"CardDisplay_description__OeJug\",\"descriptionWrapper\":\"CardDisplay_descriptionWrapper__2Wtnx\",\"descriptionWrapperEnergy\":\"CardDisplay_descriptionWrapperEnergy__3hXWW\",\"descriptionWrapperPokemon\":\"CardDisplay_descriptionWrapperPokemon__2HLt6\",\"prevolveImage\":\"CardDisplay_prevolveImage__3Jrnh\",\"prevolveImageWrapper\":\"CardDisplay_prevolveImageWrapper__2130A\",\"image\":\"CardDisplay_image__1Vf1q\",\"backgroundImage\":\"CardDisplay_backgroundImage__2AC27\",\"imageLayer1\":\"CardDisplay_imageLayer1__qRJeQ\",\"imageLayer2\":\"CardDisplay_imageLayer2__15z-1\",\"typeImage\":\"CardDisplay_typeImage__3RpoQ\",\"typeImageSpecial\":\"CardDisplay_typeImageSpecial__1Z-XN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"EnergyPicker_wrapper__1gcFF\",\"type\":\"EnergyPicker_type__3zMxj\",\"image\":\"EnergyPicker_image__n99hQ\",\"button\":\"EnergyPicker_button__3c3pQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__1WBu2\",\"header\":\"App_header__2Qyab\",\"headerCircle\":\"App_headerCircle__1xHEs\",\"content\":\"App_content__1WEil\",\"footer\":\"App_footer__1Cr4W\"};","import { CardOptions } from \"interfaces\";\r\n\r\nexport const REQUEST_CARD_OPTIONS         = 'REQUEST_CARD_OPTIONS';\r\nexport const REQUEST_CARD_OPTIONS_SUCCESS = 'REQUEST_CARD_OPTIONS_SUCCESS';\r\nexport const REQUEST_CARD_OPTIONS_FAILED  = 'REQUEST_CARD_OPTIONS_FAILED';\r\n\r\n\r\nexport const requestCardOptions = () => ({ type: REQUEST_CARD_OPTIONS });\r\nexport const requestCardOptionsSuccess = (cardOptions: CardOptions) => ({ type: REQUEST_CARD_OPTIONS_SUCCESS, payload: { cardOptions } });\r\nexport const requestCardOptionsFailed = (errorMessage: string) => ({ type: REQUEST_CARD_OPTIONS_FAILED, payload: { errorMessage } });\r\n","import { REQUEST_CARD_OPTIONS, REQUEST_CARD_OPTIONS_SUCCESS, REQUEST_CARD_OPTIONS_FAILED } from 'actions';\r\nimport { CardOptions, CardOptionsAction } from 'interfaces';\r\n\r\nexport interface CardOptionsState {\r\n  isLoading: boolean,\r\n  error: boolean,\r\n  cardOptions: CardOptions,\r\n}\r\n\r\nconst initialState: CardOptionsState = {\r\n  isLoading: false,\r\n  error: false,\r\n  cardOptions: {\r\n    baseSets: [],\r\n    rarities: [],\r\n    sets: [],\r\n    subtypes: [],\r\n    types: [],\r\n    variations: [],\r\n    rotations: [],\r\n    rarityIcons: [],\r\n  },\r\n}\r\n\r\nexport const cardOptionsReducer = (\r\n  state: CardOptionsState = initialState,\r\n  action: CardOptionsAction,\r\n): CardOptionsState => {\r\n  switch(action.type) {\r\n    case REQUEST_CARD_OPTIONS:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case REQUEST_CARD_OPTIONS_SUCCESS:\r\n      return {\r\n        isLoading: false,\r\n        error: false,\r\n        cardOptions: action.payload.cardOptions || initialState.cardOptions,\r\n      };\r\n    case REQUEST_CARD_OPTIONS_FAILED:\r\n      console.error(action.payload.errorMessage || 'error');\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default [];\r\n","import { combineReducers } from 'redux';\r\nimport { CardOptionsState, cardOptionsReducer } from './cardOptions';\r\n\r\nexport interface State {\r\n  cardOptions: CardOptionsState,\r\n}\r\n\r\nexport default combineReducers<State>({\r\n  cardOptions: cardOptionsReducer,\r\n});\r\n","import { ImportedCard, Card, Move, MoveType, ImagePathOptions } from 'interfaces';\r\n\r\nexport const relativePathPrefix = (path: string): string  => `${process.env.REACT_APP_RELATIVE_PREFIX || ''}${path}`;\r\n\r\nexport const cardToImportedCard = (card: Card): ImportedCard => ({\r\n  supertype: card.supertype,\r\n  name: card.name,\r\n  subname: card.subname,\r\n  backgroundImage: card.backgroundImage,\r\n  imageLayer1: card.imageLayer1,\r\n  imageLayer2: card.imageLayer2,\r\n  typeImage: card.typeImage,\r\n  customSetIcon: card.customSetIcon,\r\n  cardNumber: card.cardNumber,\r\n  totalInSet: card.totalInSet,\r\n  hitpoints: card.hitpoints,\r\n  illustrator: card.illustrator,\r\n  weaknessAmount: card.weaknessAmount,\r\n  resistanceAmount: card.resistanceAmount,\r\n  retreatCost: card.retreatCost,\r\n  ability: card.ability,\r\n  prevolveName: card.prevolveName,\r\n  prevolveImage: card.prevolveImage,\r\n  pokedexEntry: card.pokedexEntry,\r\n  description: card.description,\r\n  baseSetId: card.baseSet?.id,\r\n  setId: card.set?.id,\r\n  typeId: card.type?.id,\r\n  weaknessTypeId: card.weaknessType?.id,\r\n  resistanceTypeId: card.resistanceType?.id,\r\n  subtypeId: card.subtype?.id,\r\n  rarityId: card.rarity?.id,\r\n  variationId: card.variation?.id,\r\n  rotationId: card.rotation?.id,\r\n  rarityIconId: card.rarityIcon?.id,\r\n  moves: card.moves?.map((move: Move) => ({\r\n    name: move.name,\r\n    damage: move.damage,\r\n    text: move.text,\r\n    energyCost: move.energyCost.map((moveType: MoveType) => ({\r\n      amount: moveType.amount,\r\n      typeId: moveType.type.id,\r\n    })),\r\n  })),\r\n});\r\n\r\nconst cardOptionsToImage = (options: ImagePathOptions, folder?: string, supertype?: string) => {\r\n  // Format the options according to the formatting defined in the README\r\n  let filePath: string = relativePathPrefix(`/assets/${options.supertype || supertype}/`);\r\n  if(folder) {\r\n    filePath += `${folder}/`;\r\n  }\r\n  Object.values(options).forEach((param: string, i: number) => {\r\n    if(param !== undefined && param !== 'default') {\r\n      if((param === 'Dynamax' && options.rarity === 'Rainbow') ||\r\n        (param === 'Gigantamax' && options.rarity === 'Rainbow') ||\r\n        (options.rarity === 'Promo' && param === 'Basic')) {\r\n        return;\r\n      }\r\n      if(i !== 0) {\r\n        filePath += '_';\r\n      }\r\n      filePath += param;\r\n      if(param === 'Rainbow') {\r\n        if(options.variation === 'Dynamax' || options.variation === 'Gigantamax') {\r\n          filePath += `_${options.variation}`;\r\n        }\r\n      }\r\n      if(param === 'V' && !options.rarity) {\r\n        filePath += '_Basic';\r\n      }\r\n    }\r\n  });\r\n  return `${filePath}.png`;\r\n}\r\n\r\nexport const getCardImage = (options: ImagePathOptions): string => {\r\n  let imagePath: string;\r\n  switch(options.supertype) {\r\n    case 'Pokemon':\r\n      // This one didnt have supertype before\r\n      imagePath = cardOptionsToImage({ baseSet: options.baseSet, subtype: options.subtype, variation: options.variation,\r\n        rarity: options.rarity, type: options.type }, options.type, options.supertype);\r\n      break;\r\n    case 'Energy':\r\n      imagePath = cardOptionsToImage({ baseSet: options.baseSet, supertype: options.supertype, type: options.type });\r\n      break;\r\n    case 'Trainer':\r\n      imagePath = cardOptionsToImage({ baseSet: options.baseSet, supertype: options.supertype, type: options.type, subtype: options.subtype });\r\n      break;\r\n    default:\r\n      imagePath = '';\r\n  }\r\n  return imagePath;\r\n}\r\n","import { relativePathPrefix } from \"services\";\r\n\r\nexport const getCardOptions = async () => {\r\n  try {\r\n    const response = await fetch(relativePathPrefix('/data/cardOptions.json'));\r\n    return response.json();\r\n  } catch(e) {\r\n    console.error(e);\r\n  }\r\n}\r\n","import { call, put, takeLatest } from 'redux-saga/effects'\r\nimport { CardOptionsAction } from 'interfaces';\r\nimport { getCardOptions } from 'api';\r\nimport { requestCardOptionsSuccess, requestCardOptionsFailed, REQUEST_CARD_OPTIONS } from 'actions';\r\n\r\nfunction* fetchCardOptions(action: CardOptionsAction) {\r\n  try {\r\n    const cardOptions = yield call(getCardOptions);\r\n    yield put(requestCardOptionsSuccess(cardOptions));\r\n  } catch(e) {\r\n    console.error(e);\r\n    yield put(requestCardOptionsFailed('Request failed'));\r\n  }\r\n}\r\n\r\n\r\nexport default function* mySaga() {\r\n  yield takeLatest(REQUEST_CARD_OPTIONS, fetchCardOptions);\r\n}\r\n","import createSagaMiddleware from 'redux-saga';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducer from 'reducers';\r\nimport mySaga from 'sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(mySaga);\r\n","import React from 'react';\r\nimport { Type } from 'interfaces';\r\nimport styles from './CardDisplay.module.scss';\r\nimport { formatText } from './index';\r\n\r\ninterface Props {\r\n  name?: string,\r\n  description?: string,\r\n  type?: Type,\r\n  subname?: string,\r\n}\r\n\r\nconst TrainerCard: React.FC<Props> = ({ name, description, type, subname }) => <>\r\n  <span className={styles.name}>{formatText(name)}</span>\r\n  <div className={styles.descriptionWrapper}>\r\n    <p className={styles.description}>{formatText(description)}</p>\r\n  </div>\r\n  {type?.hasSubname && <span className={styles.subname}>{formatText(subname)}</span>}\r\n</>\r\n\r\nexport default TrainerCard;\r\n","import React from 'react';\r\nimport { Type } from 'interfaces';\r\nimport styles from './CardDisplay.module.scss';\r\nimport { formatText } from './index';\r\n\r\ninterface Props {\r\n  name?: string,\r\n  description?: string,\r\n  type?: Type,\r\n  typeImage?: string,\r\n}\r\n\r\nconst EnergyCard: React.FC<Props> = ({ name, description, type, typeImage }) => <>\r\n  {type?.hasSpecialStyle && <>\r\n    <span className={styles.name}>{formatText(name)}</span>\r\n    <div className={`${styles.descriptionWrapper} ${styles.descriptionWrapperEnergy}`}>\r\n      <p className={styles.description}>{formatText(description)}</p>\r\n    </div>\r\n  </>}\r\n  {typeImage &&\r\n    <img src={typeImage} className={`${styles.typeImage} ${type?.shortName === 'Special' ? styles.typeImageSpecial : ''}`} alt='' />\r\n  }\r\n</>\r\n\r\nexport default EnergyCard;\r\n","import React, { useEffect } from 'react';\r\nimport { Card, Move } from 'interfaces';\r\nimport styles from './CardDisplay.module.scss';\r\nimport { formatText } from './index';\r\nimport { relativePathPrefix } from 'services';\r\n\r\ninterface Props {\r\n  imagePath?: string,\r\n  card: Card,\r\n}\r\n\r\nconst PokemonCard: React.FC<Props> = ({ imagePath, card }) => {\r\n  useEffect(() => {\r\n    if(card.moves) {\r\n      let highestCost = 0;\r\n      card.moves.forEach((move) => {\r\n        let totalAmount: number = 0;\r\n        move.energyCost.forEach((energyCost) => totalAmount += energyCost.amount);\r\n        if(totalAmount > highestCost) {\r\n          highestCost = totalAmount;\r\n        }\r\n      });\r\n\r\n      const moveNames: HTMLElement[] = document.querySelectorAll('.moveName') as unknown as HTMLElement[];\r\n      const initialLeft = +styles.moveNameLeft.substr(0, styles.moveNameLeft.length - 1);\r\n      moveNames.forEach((moveName) => {\r\n        moveName.style.left = `${Math.max(initialLeft, initialLeft + ((highestCost - 4) * 7))}%`;\r\n      });\r\n    }\r\n  }, [card.moves]);\r\n\r\n  const formatMoveCost = (move: Move) => {\r\n    let totalAmount: number = 0;\r\n    const moveImages = move.energyCost.map((moveType) => {\r\n      const returnValue: JSX.Element[] = [];\r\n      for(let i = 0; i < moveType.amount; i++) {\r\n        totalAmount++;\r\n        returnValue.push(<img src={relativePathPrefix(`/assets/icons_symbols/types/${moveType.type.shortName}_border.png`)} className={styles.moveEnergy} alt='' key={i} />);\r\n      }\r\n      return returnValue;\r\n    });\r\n\r\n    if(totalAmount === 0) {\r\n      return <img src={relativePathPrefix('/assets/icons_symbols/types/Empty_border.png')} className={styles.moveEnergy} alt='' />;\r\n    } else {\r\n      return moveImages;\r\n    }\r\n  }\r\n\r\n  return <>\r\n    <span className={`${styles.name} ${styles.namePokemon} ${card.rarity?.hasNameOutline || card.subtype?.hasNameOutline ? styles.nameOutline : ''}`}>\r\n      {formatText(card.name)}\r\n      {card.subtype?.hasVSymbol && <img src={relativePathPrefix('/assets/icons_symbols/other/v_icon.png')} className={styles.nameIcon} alt='' />}\r\n      {card.subtype?.hasVMaxSymbol && <img src={relativePathPrefix('/assets/icons_symbols/other/vmax_icon.png')} className={styles.nameIcon} alt='' />}\r\n    </span>\r\n    <div className={`${styles.hitpointsWrapper} ${card.subtype?.hasVStyle ? styles.hitpointsWrapperV : ''}`}>\r\n      <span className={styles.hitpointsHP}>HP</span>\r\n      <span className={styles.hitpoints}>{card.hitpoints && card.hitpoints <= 999 ? card.hitpoints : 999}</span>\r\n    </div>\r\n    {(card.subtype?.hasPrevolve && card.prevolveName) &&\r\n      <span className={styles.prevolveName}>{'Evolves from '}{formatText(card.prevolveName)}</span>\r\n    }\r\n    {(card.subtype?.hasPokedexEntry && card.pokedexEntry) &&\r\n      <span className={styles.pokedexEntry}>{card.pokedexEntry}</span>\r\n    }\r\n    <div className={`${styles.movesWrapper} ${card.subtype?.hasVStyle ? styles.movesWrapperV : ''}`}>\r\n      {card.ability &&\r\n        <div className={styles.ability}>\r\n          <div className={styles.abilityNameWrapper}>\r\n            {card.subtype?.hasVStyle ?\r\n              <img className={`${styles.abilityIcon} ${styles.abilityIconV}`} src={relativePathPrefix('/assets/icons_symbols/other/ability_v.png')} alt='' />\r\n              :\r\n              <img className={styles.abilityIcon} src={relativePathPrefix('/assets/icons_symbols/other/ability.png')} alt='' />\r\n            }\r\n            <span className={`${styles.moveName} moveName`}>{card.ability.name}</span>\r\n          </div>\r\n          <p className={styles.abilityText}>{formatText(card.ability.text)}</p>\r\n        </div>\r\n      }\r\n      {card.moves && (card.moves.map((move, i) =>\r\n        <div key={i}\r\n          className={`${i === 0 ? card.moves && card.moves.length > 1 ? styles.moveMultiple : styles.move : ''} ${card.subtype?.hasVStyle ? styles.moveV : ''}`}>\r\n          {move.name &&\r\n            <div className={styles.moveNameWrapper}>\r\n              <div className={styles.moveCost}>\r\n                {formatMoveCost(move)}\r\n              </div>\r\n              <span className={`${styles.moveName} moveName`}>{move.name}</span>\r\n              <span className={styles.moveDamage}>{move.damage}</span>\r\n            </div>\r\n          }\r\n          <p className={`${styles.moveText} ${card.subtype?.hasVStyle ? styles.moveTextV : ''}`}>{formatText(move.text)}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n    <div className={`${styles.typeBar} ${!card.rarity?.hasBlackTopText && card.subtype?.hasWhiteTopText ? styles.whiteText : ''}`}>\r\n      {card.weaknessType &&\r\n        <span className={styles.weakness}>\r\n          <img className={styles.weaknessIcon} src={relativePathPrefix(`/assets/icons_symbols/types/${card.weaknessType.shortName}.png`)} alt='' />\r\n          <span>×{card.weaknessAmount && card.weaknessAmount < 100 ? card.weaknessAmount : 99}</span>\r\n        </span>\r\n      }\r\n      {card.resistanceType &&\r\n        <span className={styles.resistance}>\r\n          <img className={styles.resistanceIcon} src={relativePathPrefix(`/assets/icons_symbols/types/${card.resistanceType.shortName}.png`)} alt='' />\r\n          <span>-{card.resistanceAmount && card.resistanceAmount < 100 ? card.resistanceAmount : 99}</span>\r\n        </span>\r\n      }\r\n      <div className={styles.retreatCost}>\r\n        {card.retreatCost ? Array.from(Array(card.retreatCost >= 0 ? card.retreatCost : 0), (e, i) =>\r\n          i < 5 && <img key={i} className={styles.retreatCostIcon} src={relativePathPrefix('/assets/icons_symbols/types/Colorless.png')} alt='' />\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n    {!card.subtype?.noDescription &&\r\n      <div className={`${styles.descriptionWrapper} ${styles.descriptionWrapperPokemon}`}>\r\n        <p className={styles.description}>{formatText(card.description)}</p>\r\n      </div>\r\n    }\r\n    {(card.subtype?.hasPrevolve && card.prevolveImage) &&\r\n      <div className={styles.prevolveImageWrapper}>\r\n        <img src={card.prevolveImage} className={styles.prevolveImage} alt='' />\r\n      </div>\r\n    }\r\n  </>\r\n}\r\n\r\nexport default PokemonCard;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card } from 'interfaces';\r\nimport TrainerCard from './Trainer';\r\nimport styles from './CardDisplay.module.scss';\r\nimport EnergyCard from './Energy';\r\nimport PokemonCard from './Pokemon';\r\nimport { relativePathPrefix, getCardImage } from 'services';\r\n\r\ninterface Props {\r\n  card: Card,\r\n}\r\n\r\nconst CardDisplay: React.FC<Props> = ({ card }) => {\r\n  const [imagePath, setImagePath] = useState<string>();\r\n  const { supertype, type, baseSet, set, variation, subtype, rarity } = card;\r\n\r\n  useEffect(() => {\r\n    if(supertype && type && baseSet) {\r\n      const newImage: string = getCardImage({baseSet: baseSet.shortName, type: type.shortName, rarity: rarity?.shortName, subtype: subtype?.shortName, supertype: supertype, variation: variation?.shortName})\r\n      setImagePath(newImage);\r\n    }\r\n  }, [supertype, type, baseSet, set, variation, subtype, rarity]);\r\n\r\n  return (\r\n    <div className={`${styles.card} ${card.type?.hasWhiteText ? styles.whiteText : ''}`} id='card'>\r\n      {card.backgroundImage && <img src={card.backgroundImage} className={styles.backgroundImage} alt='' />}\r\n      {supertype === 'Trainer' && <TrainerCard name={card.name} subname={card.subname} description={card.description} type={card.type} />}\r\n      {supertype === 'Energy' && <EnergyCard name={card.name} description={card.description} type={card.type} typeImage={card.typeImage} />}\r\n      {supertype === 'Pokemon' && <PokemonCard card={card} />}\r\n      {!(supertype === 'Energy' && card.type?.hasSpecialStyle) && <>\r\n        <div className={card.rarity?.hasNameOutline || card.subtype?.hasNameOutline ? styles.cardInfoWhite : ''}>\r\n          {(supertype !== 'Energy' && card.illustrator) && <span className={styles.illustrator}>{`Illus. ${card.illustrator}`}</span>}\r\n          {card.customSetIcon ?\r\n            <img src={card.customSetIcon} alt='' className={styles.setIcon} />\r\n            :\r\n            card.set && <img src={relativePathPrefix(`/assets/icons_symbols/sets/${card.set.number}_SetIcon_${card.set.shortName}.png`)} alt={card.set.name} className={styles.setIcon} />\r\n          }\r\n          {card.rotation && <img src={relativePathPrefix(`/assets/icons_symbols/rotations/${card.rotation?.shortName}.png`)} alt={card.rotation?.name} className={styles.rotation} />}\r\n          <span className={styles.setNumber}>\r\n            {`${card.cardNumber || ''}${card.totalInSet ? `/${card.totalInSet}` : ''}`}\r\n            {card.rarityIcon &&\r\n              <img alt={card.rarityIcon.name} className={styles.rarityIcon}\r\n                src={relativePathPrefix(`/assets/icons_symbols/rarities/${card.rarityIcon.shortName}${(card.type?.hasWhiteText || card.subtype?.hasVStyle) ? '_white' : ''}.png`)}\r\n              />\r\n            }\r\n          </span>\r\n        </div>\r\n      </>}\r\n      {card.imageLayer1 && <img src={card.imageLayer1} className={styles.imageLayer1} alt='' />}\r\n      <img src={imagePath} className={styles.image} alt={card.name || ''} />\r\n      {card.imageLayer2 && <img src={card.imageLayer2} className={styles.imageLayer2} alt='' />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardDisplay;\r\n\r\nexport const formatText = (text: string | undefined) => {\r\n  if(text) {\r\n    let chars: RegExpMatchArray | null = text.match(/\\[.*?\\]/g);\r\n    if(chars) {\r\n      const charsArr: string[] = chars.map(char => char.replace('[', '').replace(']', ''));\r\n      const textNoChars = text.split(/\\[.*?\\]/g);\r\n      const returnText: (JSX.Element | string)[] = [];\r\n      textNoChars.forEach((textElm, i) => {\r\n        returnText.push(textElm);\r\n        if(charsArr.length > i) {\r\n          if(charsArr[i].length > 1) {\r\n            returnText.push(<span key={i} className={styles.italicText}>{charsArr[i]}</span>);\r\n          } else {\r\n            returnText.push(<span key={i} className={styles.ptcgText}>{charsArr[i]}</span>);\r\n          }\r\n        }\r\n      });\r\n      return returnText;\r\n    } else {\r\n      return text;\r\n    }\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport styles from '../Form.module.scss';\r\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\ninterface LabelButton {\r\n  name: string,\r\n  icon: IconDefinition,\r\n  onClick: () => void,\r\n}\r\n\r\ninterface Props {\r\n  shortName: string,\r\n  name?: string,\r\n  horizontal?: boolean,\r\n  buttons?: LabelButton[],\r\n}\r\n\r\nconst InputLabel: React.FC<Props> = ({ shortName, name, horizontal, buttons, children }) =>\r\n  <label htmlFor={shortName} className={`${styles.input} ${horizontal ? styles.horizontal : ''}`}>\r\n    {name &&\r\n      <div className={styles.inputLabel}>\r\n        <span>{name}</span>\r\n        {buttons &&\r\n          <span>\r\n            {buttons.map((button: LabelButton, i: number) =>\r\n              <FontAwesomeIcon icon={button.icon} title={button.name} className={styles.inputLabelButton} key={i}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  button.onClick();\r\n                }}\r\n              />\r\n            )}\r\n          </span>\r\n        }\r\n      </div>\r\n    }\r\n    {children}\r\n  </label>\r\n\r\nexport default InputLabel;\r\n","import React from 'react';\r\nimport styles from '../Form.module.scss';\r\nimport InputLabel from '../InputLabel';\r\n\r\ninterface Props {\r\n  shortName: string,\r\n  name: string,\r\n  checked: boolean,\r\n  setter: (newValue: boolean) => void,\r\n}\r\n\r\nconst Checkbox: React.FC<Props> = ({ shortName, name, checked, setter }) =>\r\n  <InputLabel shortName={shortName} name={name}>\r\n      <input\r\n        id={shortName}\r\n        name={shortName}\r\n        checked={checked}\r\n        onChange={e => setter(e.currentTarget.checked)}\r\n        className={styles.inputField}\r\n        type='checkbox'\r\n      />\r\n  </InputLabel>\r\n\r\nexport default Checkbox;\r\n","import React, { useState, useEffect } from 'react';\r\nimport styles from './EnergyPicker.module.scss';\r\nimport { MoveType, Type } from 'interfaces';\r\nimport { relativePathPrefix } from 'services';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons'\r\n\r\ninterface Props {\r\n  label: String,\r\n  types: Type[],\r\n  moveCost: MoveType[],\r\n  setMoveCost: (moveTypes: MoveType[]) => void,\r\n}\r\n\r\nconst EnergyPicker: React.FC<Props> = ({ label, types, moveCost, setMoveCost }) => {\r\n  let [moveTypes, setMoveTypes] = useState<MoveType[]>([]);\r\n\r\n  useEffect(() => {\r\n    const newMoveTypes: MoveType[] = [];\r\n    types.forEach((type) => {\r\n      if(type.supertype === 'Pokemon') {\r\n        newMoveTypes.push({\r\n          type,\r\n          amount: 0,\r\n        });\r\n      }\r\n    });\r\n    setMoveTypes(newMoveTypes);\r\n  }, [types]);\r\n\r\n  return (\r\n    <div>\r\n      <span>{label}</span>\r\n      <div className={styles.wrapper}>\r\n        {moveTypes.map((moveType, i) =>\r\n          <div className={styles.type} key={i}>\r\n            <span className={styles.button} onClick={() => {\r\n              let newMoveCost: MoveType[] = [...moveCost];\r\n              let type: MoveType | undefined = newMoveCost.find((a) => a.type.id === moveType.type.id);\r\n              if(type) {\r\n                type.amount = type.amount + 1;\r\n              } else {\r\n                type = {\r\n                  type: moveType.type,\r\n                  amount: 1,\r\n                };\r\n                newMoveCost.push(type);\r\n              }\r\n              setMoveCost(newMoveCost);\r\n            }}>\r\n              <FontAwesomeIcon icon={faChevronUp} />\r\n            </span>\r\n            <img src={relativePathPrefix(`/assets/icons_symbols/types/${moveType.type.shortName}_border.png`)} className={styles.image} alt={moveType.type.name} title={moveType.type.name} />\r\n            <span className={styles.button} onClick={() => {\r\n              let newMoveCost: MoveType[] = [...moveCost];\r\n              let type: MoveType | undefined = newMoveCost.find((a) => a.type.id === moveType.type.id);\r\n              if(type) {\r\n                type.amount = type.amount - 1;\r\n                if(type.amount <= 0) {\r\n                  newMoveCost.splice(newMoveCost.indexOf(type), 1)\r\n                }\r\n                setMoveCost(newMoveCost);\r\n              }\r\n            }}>\r\n              <FontAwesomeIcon icon={faChevronDown} />\r\n            </span>\r\n            <span>{moveCost.find((a) => a.type.id === moveType.type.id)?.amount || 0}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EnergyPicker;\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport styles from '../Form.module.scss';\r\nimport InputLabel from '../InputLabel';\r\nimport { faCropAlt, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\ninterface Props {\r\n  shortName: string,\r\n  name?: string,\r\n  info?: string,\r\n  setter: (newValue:  any) => void,\r\n  onChange?: (newImage: string) => void,\r\n  croppable?: boolean,\r\n  cropperSetter?: (newImage: string, imageSetter: () => void) => void,\r\n}\r\n\r\nconst ImageInput: React.FC<Props> = ({ shortName, name, info, setter, onChange, croppable, cropperSetter }) => {\r\n  const [image, setImage] = useState<string>('');\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const acceptedTypes = useRef<string[]>(['image/png', 'image/jpeg'])\r\n\r\n  useEffect(() => {\r\n    setter(image);\r\n    onChange && onChange(image);\r\n    cropperSetter && cropperSetter(image, () => setter);\r\n  }, [image]);\r\n\r\n  return (\r\n    <InputLabel shortName={shortName} name={name} horizontal buttons={croppable ? [\r\n      {\r\n        name: 'Crop',\r\n        icon: faCropAlt,\r\n        onClick: () => cropperSetter && cropperSetter(image, () => setter),\r\n      },\r\n      {\r\n        name: 'Remove',\r\n        icon: faTimes,\r\n        onClick: () => {\r\n          setImage('');\r\n          if(inputRef.current) {\r\n            inputRef.current.value = '';\r\n          }\r\n        },\r\n      },\r\n    ] : []}>\r\n      {info && <span className={styles.info}>{info}</span>}\r\n      <input\r\n        ref={inputRef}\r\n        id={shortName}\r\n        name={shortName}\r\n        onChange={e => {\r\n          if(e.target.files && e.target.files[0] && acceptedTypes.current.includes(e.target.files[0].type)) {\r\n            setImage(window.URL.createObjectURL(e.target.files[0]));\r\n          } else {\r\n            setImage('');\r\n            e.target.value = '';\r\n          }\r\n        }}\r\n        className={styles.inputField}\r\n        type='file'\r\n        accept={acceptedTypes.current.join(',')}\r\n      />\r\n    </InputLabel>\r\n  )\r\n}\r\n\r\nexport default ImageInput;\r\n","import React from 'react';\r\nimport styles from '../Form.module.scss';\r\nimport InputLabel from '../InputLabel';\r\n\r\ninterface Props {\r\n  shortName: string,\r\n  name: string,\r\n  value: string | number,\r\n  type: 'text' | 'number' | 'textarea',\r\n  min?: number,\r\n  max?: number,\r\n  horizontal?: boolean,\r\n  setter: (newValue: any) => void,\r\n}\r\n\r\nconst Input: React.FC<Props> = ({ shortName, name, value, type, min, max, setter, horizontal }) =>\r\n  <InputLabel shortName={shortName} name={name} horizontal={horizontal || type === 'textarea'}>\r\n    {type !== 'textarea' ?\r\n      <input\r\n        id={shortName}\r\n        name={shortName}\r\n        value={value}\r\n        type={type}\r\n        min={min}\r\n        max={max}\r\n        onChange={e => setter(type === 'text' ? e.currentTarget.value : +e.currentTarget.value)}\r\n        className={styles.inputField}\r\n      />\r\n      :\r\n      <textarea\r\n        id={shortName}\r\n        name={shortName}\r\n        value={value}\r\n        onChange={e => setter(e.currentTarget.value)}\r\n        className={`${styles.inputField} ${styles.inputTextarea}`}\r\n      ></textarea>\r\n    }\r\n  </InputLabel>\r\n\r\nexport default Input;\r\n","import React, { ChangeEvent } from 'react';\r\nimport styles from '../Form.module.scss';\r\nimport InputLabel from '../InputLabel';\r\n\r\ninterface Props {\r\n  shortName: string,\r\n  name: string,\r\n  selectRef?: React.RefObject<HTMLSelectElement>,\r\n  onChange: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n}\r\n\r\nconst Select: React.FC<Props> = ({ shortName, name, selectRef, onChange, children }) =>\r\n  <InputLabel shortName={shortName} name={name}>\r\n    <select id={shortName} ref={selectRef} name={shortName} className={styles.inputField} onChange={onChange}>\r\n      {children}\r\n    </select>\r\n  </InputLabel>\r\n\r\nexport default Select;\r\n","import { Area } from \"react-easy-crop/types\"\r\n\r\nconst createImage = (url: string): Promise<HTMLImageElement> =>\r\n  new Promise((resolve, reject) => {\r\n    const image = new Image()\r\n    image.addEventListener('load', () => resolve(image))\r\n    image.addEventListener('error', error => reject(error))\r\n    image.setAttribute('crossOrigin', 'anonymous') // needed to avoid cross-origin issues on CodeSandbox\r\n    image.src = url\r\n  });\r\n\r\n/**\r\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\r\n * @param {File} imageSrc - Image File url\r\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\r\n */\r\nconst getCroppedImg = async (imageSrc: string, pixelCrop: Area): Promise<string> => {\r\n  let image: HTMLImageElement;\r\n  try {\r\n    image = await createImage(imageSrc);\r\n  } catch(e) {\r\n    return '';\r\n  }\r\n  const canvas = document.createElement('canvas');\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  const maxSize = Math.max(image.width, image.height);\r\n  const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2));\r\n\r\n  // set each dimensions to double largest dimension to allow for a safe area for the\r\n  // image to rotate in without being clipped by canvas context\r\n  canvas.width = safeArea;\r\n  canvas.height = safeArea;\r\n\r\n  if(ctx) {\r\n    // translate canvas context to a central location on image to allow rotating around the center.\r\n    ctx.translate(safeArea / 2, safeArea / 2);\r\n    ctx.translate(-safeArea / 2, -safeArea / 2);\r\n\r\n    // draw rotated image and store data.\r\n    ctx.drawImage(\r\n      image,\r\n      safeArea / 2 - image.width * 0.5,\r\n      safeArea / 2 - image.height * 0.5,\r\n    );\r\n    const data = ctx.getImageData(0, 0, safeArea, safeArea);\r\n\r\n    // set canvas width to final desired crop size - this will clear existing context\r\n    canvas.width = pixelCrop.width;\r\n    canvas.height = pixelCrop.height;\r\n\r\n    // paste generated rotate image with correct offsets for x,y crop values.\r\n    ctx.putImageData(\r\n      data,\r\n      0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x,\r\n      0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y,\r\n    );\r\n  }\r\n\r\n  return new Promise(resolve =>\r\n    canvas.toBlob(\r\n      file => resolve(URL.createObjectURL(file)),\r\n      'image/png'\r\n    ));\r\n}\r\n\r\nexport default getCroppedImg;\r\n","import React, { useState, useEffect, useRef, Dispatch, SetStateAction } from 'react';\r\nimport { State } from 'reducers';\r\nimport { connect } from 'react-redux';\r\nimport { CardOptionsState } from 'reducers/cardOptions';\r\nimport { Variation, Type, Subtype, Set, Rarity, BaseSet, Rotation, RarityIcon, MoveType, Card, ImportedCard, ImportedMoveType } from 'interfaces';\r\nimport { bindActionCreators } from 'redux';\r\nimport { requestCardOptions } from 'actions';\r\nimport htmlToImage from 'html-to-image';\r\nimport download from 'downloadjs';\r\nimport styles from './CardCreator.module.scss';\r\nimport CardDisplay from 'components/CardDisplay';\r\nimport { Select, Input, Checkbox, ImageInput, EnergyPicker} from 'components/FormElements';\r\nimport { relativePathPrefix, cardToImportedCard, getCardImage } from 'services';\r\nimport Cropper from 'react-easy-crop';\r\nimport { Point, Area } from 'react-easy-crop/types';\r\nimport getCroppedImg from 'cropImage';\r\n\r\ninterface Props {\r\n  cardOptionsState: CardOptionsState,\r\n  card?: ImportedCard,\r\n  requestCardOptions: () => Object,\r\n}\r\n\r\nconst CardCreatorPage: React.FC<Props> = ({ cardOptionsState, card, requestCardOptions }) => {\r\n  const importingCard = useRef<boolean>(false);\r\n  const initialImported = useRef<boolean>(false);\r\n  const [importingTrigger, setImportingTrigger] = useState<boolean>(false);\r\n  // Selectors\r\n  const [supertype, setSupertype] = useState<string>('Pokemon');\r\n  const [type, setType] = useState<Type>();\r\n  const [baseSet, setBaseSet] = useState<BaseSet>();\r\n  const [set, setSet] = useState<Set>();\r\n  const [rotation, setRotation] = useState<Rotation>();\r\n  const [variation, setVariation] = useState<Variation>();\r\n  const [subtype, setSubtype] = useState<Subtype>();\r\n  const [rarity, setRarity] = useState<Rarity>();\r\n  const [rarityIcon, setRarityIcon] = useState<RarityIcon>();\r\n  const [weaknessType, setWeaknessType] = useState<Type>();\r\n  const [resistanceType, setResistanceType] = useState<Type>();\r\n  // Selector refs\r\n  const baseSetRef = useRef<HTMLSelectElement>(null);\r\n  const supertypeRef = useRef<HTMLSelectElement>(null);\r\n  const typeRef = useRef<HTMLSelectElement>(null);\r\n  const subtypeRef = useRef<HTMLSelectElement>(null);\r\n  const variationRef = useRef<HTMLSelectElement>(null);\r\n  const rarityRef = useRef<HTMLSelectElement>(null);\r\n  const setIconRef = useRef<HTMLSelectElement>(null);\r\n  const rotationRef = useRef<HTMLSelectElement>(null);\r\n  const rarityIconRef = useRef<HTMLSelectElement>(null);\r\n  const weaknessTypeRef = useRef<HTMLSelectElement>(null);\r\n  const resistanceTypeRef = useRef<HTMLSelectElement>(null);\r\n  // Inputs\r\n  const [name, setName] = useState<string>('');\r\n  const [prevolveName, setPrevolveName] = useState<string>('');\r\n  const [hitpoints, setHitpoints] = useState<number>(100);\r\n  const [subname, setSubname] = useState<string>('');\r\n  const [pokedexEntry, setPokedexEntry] = useState<string>('');\r\n  const [weaknessAmount, setWeaknessAmount] = useState<number>(2);\r\n  const [resistanceAmount, setResistanceAmount] = useState<number>(30);\r\n  const [retreatCost, setRetreatCost] = useState<number>(1);\r\n  const [description, setDescription] = useState<string>('');\r\n  const [illustrator, setIllustrator] = useState<string>('');\r\n  const [cardNumber, setCardNumber] = useState<string>('');\r\n  const [totalInSet, setTotalInSet] = useState<string>('');\r\n  const [backgroundImage, setBackgroundImage] = useState<string>('');\r\n  const [imageLayer1, setImageLayer1] = useState<string>('');\r\n  const [imageLayer2, setImageLayer2] = useState<string>('');\r\n  const [typeImage, setTypeImage] = useState<string>('');\r\n  const [prevolveImage, setPrevolveImage] = useState<string>('');\r\n  const [hasCustomSetIcon, setHasCustomSetIcon] = useState<boolean>(false);\r\n  const [customSetIcon, setCustomSetIcon] = useState<string>('');\r\n  // Image cropper\r\n  const [cropArea, setCropArea] = useState<Point>({ x: 0, y: 0 });\r\n  const [cropZoom, setCropZoom] = useState<number>(1);\r\n  const [cropImage, setCropImage] = useState<string>('');\r\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState<Area>({ x: 0, y: 0, height: 0, width: 0 });\r\n  const [currentCropSetter, setCurrentCropSetter] = useState<Dispatch<SetStateAction<string>>>();\r\n  // Ability/Moves\r\n  const [hasAbility, setHasAbility] = useState<boolean>(false);\r\n  const [abilityName, setAbilityName] = useState<string>('');\r\n  const [abilityText, setAbilityText] = useState<string>('');\r\n  const [move1Name, setMove1Name] = useState<string>('');\r\n  const [move1Damage, setMove1Damage] = useState<string>('');\r\n  const [move1Text, setMove1Text] = useState<string>('');\r\n  const [move1Cost, setMove1Cost] = useState<MoveType[]>([]);\r\n  const [hasSecondMove, setHasSecondMove] = useState<boolean>(false);\r\n  const [move2Name, setMove2Name] = useState<string>('');\r\n  const [move2Text, setMove2Text] = useState<string>('');\r\n  const [move2Damage, setMove2Damage] = useState<string>('');\r\n  const [move2Cost, setMove2Cost] = useState<MoveType[]>([]);\r\n\r\n  useEffect(() => {\r\n    requestCardOptions();\r\n  }, [requestCardOptions]);\r\n\r\n  useEffect(() => {\r\n    setType(cardOptionsState.cardOptions.types[0]);\r\n    setWeaknessType(cardOptionsState.cardOptions.types[0]);\r\n    setSet(cardOptionsState.cardOptions.sets[0]);\r\n    setBaseSet(cardOptionsState.cardOptions.baseSets[0]);\r\n    setSubtype(cardOptionsState.cardOptions.subtypes[0]);\r\n    setRotation(cardOptionsState.cardOptions.rotations[0]);\r\n  }, [cardOptionsState]);\r\n\r\n  /**\r\n   * Changes the types/subtypes etc to the first available one within their parent\r\n   * For example, when Type is 'Item', and you switch Supertype to 'Pokemon', a Pokémon can't be an Item\r\n   * so it switches to the first available Type within 'Pokemon', which is 'Grass'\r\n   */\r\n  useEffect(() => {\r\n    if(importingCard.current) {\r\n      return;\r\n    }\r\n    if(typeRef.current) {\r\n      const { selectedIndex, options } = typeRef.current;\r\n      const value: string | undefined = options[selectedIndex]?.value;\r\n      const newType = cardOptionsState.cardOptions.types.find((a: Type) => a.id === +value);\r\n      if(newType && newType !== type) {\r\n        setType(newType);\r\n      }\r\n    } else {\r\n      setType(undefined);\r\n    }\r\n    if(subtypeRef.current) {\r\n      const { selectedIndex, options } = subtypeRef.current;\r\n      const value: string | undefined = options[selectedIndex]?.value;\r\n      const newSubtype = cardOptionsState.cardOptions.subtypes.find((a: Subtype) => a.id === +value);\r\n      if(value === 'default' || (newSubtype && newSubtype !== subtype)) {\r\n        setSubtype(newSubtype);\r\n      }\r\n    } else {\r\n      setSubtype(undefined);\r\n    }\r\n    if(variationRef.current) {\r\n      const { selectedIndex, options } = variationRef.current;\r\n      const value: string | undefined = options[selectedIndex]?.value;\r\n      const newVariation = cardOptionsState.cardOptions.variations.find((a: Variation) => a.id === +value);\r\n      if(newVariation && newVariation !== variation) {\r\n        setVariation(newVariation);\r\n      }\r\n    } else {\r\n      setVariation(undefined);\r\n    }\r\n    if(rarityRef.current) {\r\n      const { selectedIndex, options } = rarityRef.current;\r\n      const value: string | undefined = options[selectedIndex]?.value;\r\n      const newRarity = cardOptionsState.cardOptions.rarities.find((a: Rarity) => a.id === +value);\r\n      if(value === 'default' || (newRarity && newRarity !== rarity)) {\r\n        setRarity(newRarity);\r\n      }\r\n    } else {\r\n      setRarity(undefined);\r\n    }\r\n  }, [cardOptionsState.cardOptions, supertype, type, subtype, variation, rarity]);\r\n\r\n  /**\r\n   * Turns state data into a Card object\r\n   */\r\n  const makeCard = (): Card => ({\r\n    baseSet,\r\n    supertype,\r\n    type,\r\n    set,\r\n    customSetIcon: hasCustomSetIcon ? customSetIcon : undefined,\r\n    variation,\r\n    subtype,\r\n    rarity,\r\n    name,\r\n    prevolveName,\r\n    prevolveImage,\r\n    hitpoints,\r\n    subname,\r\n    typeImage,\r\n    pokedexEntry,\r\n    ability: hasAbility ? {\r\n      name: abilityName,\r\n      text: abilityText,\r\n    } : undefined,\r\n    moves: [\r\n      {\r\n        name: move1Name,\r\n        text: move1Text,\r\n        damage: move1Damage,\r\n        energyCost: move1Cost,\r\n      },\r\n      ...(!hasAbility && hasSecondMove ? [{\r\n        name: move2Name,\r\n        text: move2Text,\r\n        damage: move2Damage,\r\n        energyCost: move2Cost,\r\n      }] : []),\r\n    ],\r\n    weaknessType,\r\n    weaknessAmount,\r\n    resistanceType,\r\n    resistanceAmount,\r\n    retreatCost,\r\n    illustrator,\r\n    cardNumber,\r\n    totalInSet,\r\n    rotation,\r\n    rarityIcon,\r\n    description,\r\n    backgroundImage,\r\n    imageLayer1,\r\n    imageLayer2,\r\n  });\r\n\r\n  const downloadCard = () => {\r\n    const card = document.getElementById('card');\r\n    if(card) {\r\n      htmlToImage.toPng(card)\r\n        .then((dataUrl) => {\r\n          download(dataUrl, `${name || 'card'}${subtype?.hasVSymbol ? ' V' : subtype?.hasVMaxSymbol ? ' VMAX' : ''}.png`);\r\n        })\r\n        .catch(console.error);\r\n    }\r\n  }\r\n\r\n  const exportCard = () => {\r\n    const card: Card = makeCard();\r\n    const exportCard: ImportedCard = cardToImportedCard(card);\r\n    navigator.clipboard.writeText(JSON.stringify(exportCard));\r\n  }\r\n\r\n  /**\r\n   * Sets all card data, selectors and energy pickers to certain values based on the cardObj parameter\r\n   */\r\n  const importCard = (cardObj: ImportedCard) => {\r\n    importingCard.current = true;\r\n    // Base values\r\n    setName(cardObj.name || '');\r\n    setPrevolveName(cardObj.prevolveName || '');\r\n    setPrevolveImage(relativePathPrefix(cardObj.prevolveImage || ''));\r\n    setHitpoints(cardObj.hitpoints || 0);\r\n    setSubname(cardObj.subname || '');\r\n    setTypeImage(relativePathPrefix(cardObj.typeImage || ''));\r\n    setPokedexEntry(cardObj.pokedexEntry || '');\r\n    setWeaknessAmount(cardObj.weaknessAmount || 0);\r\n    setResistanceAmount(cardObj.resistanceAmount || 0);\r\n    setRetreatCost(cardObj.retreatCost || 0);\r\n    setIllustrator(cardObj.illustrator || '');\r\n    setCardNumber(cardObj.cardNumber || '');\r\n    setTotalInSet(cardObj.totalInSet || '');\r\n    setDescription(cardObj.description || '');\r\n    setBackgroundImage(relativePathPrefix(cardObj.backgroundImage || ''));\r\n    setImageLayer1(relativePathPrefix(cardObj.imageLayer1 || ''));\r\n    setImageLayer2(relativePathPrefix(cardObj.imageLayer2 || ''));\r\n    if(cardObj.customSetIcon) {\r\n      setHasCustomSetIcon(true);\r\n      setCustomSetIcon(cardObj.customSetIcon);\r\n    }\r\n    if(cardObj.ability) {\r\n      setHasAbility(true);\r\n      setAbilityName(cardObj.ability.name);\r\n      setAbilityText(cardObj.ability.text);\r\n    }\r\n    if(cardObj.moves) {\r\n      if(cardObj.moves[0]){\r\n        setMove1Name(cardObj.moves[0].name);\r\n        setMove1Damage(cardObj.moves[0].damage);\r\n        setMove1Text(cardObj.moves[0].text);\r\n        setMove1Cost(cardObj.moves[0].energyCost.reduce((result: MoveType[], moveType: ImportedMoveType) => {\r\n          const newType: Type | undefined = cardOptionsState.cardOptions.types.find((a) => a.id === moveType.typeId);\r\n          if(newType) {\r\n            result.push({\r\n              amount: moveType.amount,\r\n              type: newType,\r\n            });\r\n          }\r\n          return result;\r\n        }, []));\r\n      }\r\n      if(cardObj.moves[1]) {\r\n        setHasSecondMove(true);\r\n        setMove2Name(cardObj.moves[1].name);\r\n        setMove2Damage(cardObj.moves[1].damage);\r\n        setMove2Text(cardObj.moves[1].text);\r\n        setMove2Cost(cardObj.moves[1].energyCost.reduce((result: MoveType[], moveType: ImportedMoveType) => {\r\n          const newType: Type | undefined = cardOptionsState.cardOptions.types.find((a) => a.id === moveType.typeId);\r\n          if(newType) {\r\n            result.push({\r\n              amount: moveType.amount,\r\n              type: newType,\r\n            });\r\n          }\r\n          return result;\r\n        }, []));\r\n      }\r\n    }\r\n    // Selectors\r\n    const newBaseSet: BaseSet | undefined = cardOptionsState.cardOptions.baseSets.find((a) => a.id === cardObj.baseSetId);\r\n    if(newBaseSet) {\r\n      setBaseSet(newBaseSet);\r\n      if(baseSetRef.current && newBaseSet) {\r\n        baseSetRef.current.selectedIndex = Array.from(baseSetRef.current.options).findIndex((t) => +t.value === newBaseSet.id);\r\n      }\r\n    } else {\r\n      if(baseSetRef.current) {\r\n        baseSetRef.current.selectedIndex = 0;\r\n      }\r\n      setBaseSet(undefined);\r\n    }\r\n    const newSupertype = cardObj.supertype;\r\n    if(newSupertype) {\r\n      setSupertype(newSupertype);\r\n      if(supertypeRef.current) {\r\n        supertypeRef.current.selectedIndex = Array.from(supertypeRef.current.options).findIndex((t) => t.value === newSupertype);\r\n      }\r\n    } else {\r\n      if(supertypeRef.current) {\r\n        supertypeRef.current.selectedIndex = 0;\r\n      }\r\n      setSupertype('Pokemon');\r\n    }\r\n    const newType: Type | undefined = cardOptionsState.cardOptions.types.find((a) => a.id === cardObj.typeId);\r\n    if(newType) {\r\n      setType(newType);\r\n      if(typeRef.current) {\r\n        typeRef.current.selectedIndex = Array.from(typeRef.current.options).findIndex((t) => +t.value === newType.id);\r\n      }\r\n    } else {\r\n      if(typeRef.current) {\r\n        typeRef.current.selectedIndex = 0;\r\n      }\r\n      setType(undefined);\r\n    }\r\n    if(cardObj.subtypeId) {\r\n      const newSubtype: Subtype | undefined = cardOptionsState.cardOptions.subtypes.find((a) => a.id === cardObj.subtypeId);\r\n      if(newSubtype) {\r\n        setSubtype(newSubtype);\r\n        if(subtypeRef.current) {\r\n          subtypeRef.current.selectedIndex = Array.from(subtypeRef.current.options).findIndex((t) => +t.value === newSubtype.id);\r\n        }\r\n      }\r\n    } else {\r\n      if(subtypeRef.current) {\r\n        subtypeRef.current.selectedIndex = 0;\r\n      }\r\n      setSubtype(undefined);\r\n    }\r\n    if(cardObj.setId) {\r\n      const newSet: Set | undefined = cardOptionsState.cardOptions.sets.find((a) => a.id === cardObj.setId);\r\n      if(newSet) {\r\n        setSet(newSet);\r\n        if(setIconRef.current) {\r\n          setIconRef.current.selectedIndex = Array.from(setIconRef.current.options).findIndex((t) => +t.value === newSet.id);\r\n        }\r\n      }\r\n    } else {\r\n      if(setIconRef.current) {\r\n        setIconRef.current.selectedIndex = 0;\r\n      }\r\n      setSet(undefined);\r\n    }\r\n    if(cardObj.weaknessTypeId) {\r\n      const newWeaknessType: Type | undefined = cardOptionsState.cardOptions.types.find((a) => a.id === cardObj.weaknessTypeId);\r\n      if(newWeaknessType) {\r\n        setWeaknessType(newWeaknessType);\r\n        if(weaknessTypeRef.current) {\r\n          weaknessTypeRef.current.selectedIndex = Array.from(weaknessTypeRef.current.options).findIndex((t) => +t.value === newWeaknessType.id);\r\n        }\r\n      }\r\n    } else {\r\n      if(weaknessTypeRef.current) {\r\n        weaknessTypeRef.current.selectedIndex = 0;\r\n      }\r\n      setWeaknessType(undefined);\r\n    }\r\n    if(cardObj.resistanceTypeId) {\r\n      const newResistanceType: Type | undefined = cardOptionsState.cardOptions.types.find((a) => a.id === cardObj.resistanceTypeId);\r\n      if(newResistanceType) {\r\n        setResistanceType(newResistanceType);\r\n        if(resistanceTypeRef.current) {\r\n          resistanceTypeRef.current.selectedIndex = Array.from(resistanceTypeRef.current.options).findIndex((t) => +t.value === newResistanceType.id);\r\n        }\r\n      }\r\n    } else {\r\n      if(resistanceTypeRef.current) {\r\n        resistanceTypeRef.current.selectedIndex = 0;\r\n      }\r\n      setResistanceType(undefined);\r\n    }\r\n    if(cardObj.rotationId) {\r\n      const newRotation: Rotation | undefined = cardOptionsState.cardOptions.rotations.find((a) => a.id === cardObj.rotationId);\r\n      if(newRotation) {\r\n        setRotation(newRotation);\r\n        if(rotationRef.current) {\r\n          rotationRef.current.selectedIndex = Array.from(rotationRef.current.options).findIndex((t) => +t.value === newRotation.id);\r\n        }\r\n      }\r\n    } else {\r\n      if(rotationRef.current) {\r\n        rotationRef.current.selectedIndex = 0;\r\n      }\r\n      setRotation(undefined);\r\n    }\r\n    if(cardObj.variationId) {\r\n      const newVariation: Variation | undefined = cardOptionsState.cardOptions.variations.find((a) => a.id === cardObj.variationId);\r\n      if(newVariation) {\r\n        setVariation(newVariation);\r\n        if(variationRef.current) {\r\n          variationRef.current.selectedIndex = Array.from(variationRef.current.options).findIndex((t) => +t.value === newVariation.id);\r\n        }\r\n      }\r\n    } else {\r\n      if(variationRef.current) {\r\n        variationRef.current.selectedIndex = 0;\r\n      }\r\n      setVariation(undefined);\r\n    }\r\n    if(cardObj.rarityId) {\r\n      const newRarity: Rarity | undefined = cardOptionsState.cardOptions.rarities.find((a) => a.id === cardObj.rarityId);\r\n      if(newRarity) {\r\n        setRarity(newRarity);\r\n        if(rarityRef.current) {\r\n          rarityRef.current.selectedIndex = Array.from(rarityRef.current.options).findIndex((t) => +t.value === newRarity.id);\r\n        }\r\n      }\r\n    } else {\r\n      if(rarityRef.current) {\r\n        rarityRef.current.selectedIndex = 0;\r\n      }\r\n      setRarity(undefined);\r\n    }\r\n    if(cardObj.rarityIconId) {\r\n      const newRarityIcon: RarityIcon | undefined = cardOptionsState.cardOptions.rarityIcons.find((a) => a.id === cardObj.rarityIconId);\r\n      if(newRarityIcon) {\r\n        setRarityIcon(newRarityIcon);\r\n        if(rarityIconRef.current) {\r\n          rarityIconRef.current.selectedIndex = Array.from(rarityIconRef.current.options).findIndex((t) => +t.value === newRarityIcon.id);\r\n        }\r\n      }\r\n    } else {\r\n      if(rarityIconRef.current) {\r\n        rarityIconRef.current.selectedIndex = 0;\r\n      }\r\n      setRarityIcon(undefined);\r\n    }\r\n    setImportingTrigger(!importingTrigger);\r\n  }\r\n\r\n  /**\r\n   * Callback for the function above\r\n   */\r\n  useEffect(() => {\r\n    importingCard.current = false;\r\n  }, [importingTrigger]);\r\n\r\n  useEffect(() => {\r\n    // Initially import the prop-card once the selectors have loaded\r\n    if(!initialImported.current && card && subtypeRef.current) {\r\n      importCard(card);\r\n      initialImported.current = true;\r\n    }\r\n  }, [card, importCard]);\r\n\r\n  const resetCropper = (newImage: string, imageSetter: () => void) => {\r\n    setCropImage(newImage);\r\n    setCurrentCropSetter(imageSetter);\r\n    setCropArea({ x: 0, y: 0});\r\n    setCroppedAreaPixels({ ...croppedAreaPixels, x: 0, y: 0});\r\n    setCropZoom(1);\r\n  }\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.form}>\r\n        <button className={styles.button} onClick={e => {\r\n          navigator.clipboard.readText()\r\n            .then((value: string) => {\r\n              importCard(JSON.parse(value) as ImportedCard);\r\n            })\r\n            .catch(console.error);\r\n        }}>{'Import from clipboard'}</button>\r\n        <div className={styles.seperator}>\r\n          <Select name='Base Set' shortName='baseSet' selectRef={baseSetRef} onChange={e => setBaseSet(cardOptionsState.cardOptions.baseSets.find((a: BaseSet) => a.id === +e.currentTarget.value))}>\r\n            {cardOptionsState.cardOptions.baseSets.map((value: BaseSet, i: number) =>\r\n              <option value={value.id} key={i}>{value.name}</option>\r\n            )}\r\n          </Select>\r\n          <Select name='Supertype' shortName='supertype' selectRef={supertypeRef} onChange={e => setSupertype(e.currentTarget.value)}>\r\n            <option value={'Pokemon'}>{'Pokémon'}</option>\r\n            <option value={'Trainer'}>{'Trainer'}</option>\r\n            <option value={'Energy'}>{'Energy'}</option>\r\n          </Select>\r\n          <Select name='Type' shortName='type' selectRef={typeRef} onChange={e => setType(cardOptionsState.cardOptions.types.find((a: Type) => a.id === +e.currentTarget.value))}>\r\n            {cardOptionsState.cardOptions.types.map((value: Type, i: number) => {\r\n              if(supertype !== value.supertype) {\r\n                return false;\r\n              } else {\r\n                return <option value={value.id} key={i}>{value.name}</option>;\r\n              }\r\n            })}\r\n          </Select>\r\n          {type?.hasSubtypes && supertype !== 'Energy' &&\r\n            <Select name='Subtype' shortName='subtype' selectRef={subtypeRef} onChange={e => setSubtype(cardOptionsState.cardOptions.subtypes.find((a: Subtype) => a.id === +e.currentTarget.value))}>\r\n              {type?.subtypeOptional && <option value={'default'}>{'Default'}</option>}\r\n              {cardOptionsState.cardOptions.subtypes.map((value: Subtype, i: number) => {\r\n                if(!value.types.includes(type?.id || 0)) {\r\n                  return false;\r\n                } else {\r\n                  return <option value={value.id} key={i}>{value.name}</option>;\r\n                }\r\n              })}\r\n            </Select>\r\n          }\r\n          {subtype?.hasVariations && supertype !== 'Energy' && supertype !== 'Trainer' &&\r\n            <Select name='Variation' shortName='variation' selectRef={variationRef} onChange={e => setVariation(cardOptionsState.cardOptions.variations.find((a: Variation) => a.id === +e.currentTarget.value))}>\r\n              {cardOptionsState.cardOptions.variations.map((value: Variation, i: number) => {\r\n                if(!value.subtypes.includes(subtype?.id || 0)) {\r\n                  return false;\r\n                } else {\r\n                  return <option value={value.id} key={i}>{value.name}</option>;\r\n                }\r\n              })}\r\n            </Select>\r\n          }\r\n          {supertype !== 'Energy' && supertype !== 'Trainer' && (type?.rarities[0] || subtype?.rarities[0] || variation?.rarities[0]) &&\r\n            <Select name='Rarity' shortName='rarity' selectRef={rarityRef} onChange={e => setRarity(cardOptionsState.cardOptions.rarities.find((a: Rarity) => a.id === +e.currentTarget.value))}>\r\n              <option value={'default'}>{'Default'}</option>\r\n              {cardOptionsState.cardOptions.rarities.map((value: Rarity, i: number) => {\r\n                const includesType: boolean = type?.rarities.includes(value.id) || false;\r\n                const includesSubtype: boolean = subtype?.rarities.includes(value.id) || false;\r\n                const includesVariation: boolean = variation?.rarities.includes(value.id) || false;\r\n                if((includesType && (includesSubtype || !subtype) && (includesVariation || !variation))\r\n                  || (includesSubtype && (includesVariation || !variation))\r\n                  || includesVariation) {\r\n                  return <option value={value.id} key={i}>{value.name}</option>;\r\n                } else {\r\n                  return false;\r\n                }\r\n              })}\r\n            </Select>\r\n          }\r\n          {!(supertype === 'Energy' && type?.shortName !== 'Special') && <>\r\n            <Select name='Rotation' shortName='rotation' selectRef={rotationRef} onChange={e => setRotation(cardOptionsState.cardOptions.rotations.find((a: Rotation) => a.id === +e.currentTarget.value))}>\r\n              {cardOptionsState.cardOptions.rotations.map((value: Rotation, i: number) =>\r\n                <option value={value.id} key={i}>{value.name}</option>\r\n              )}\r\n            </Select>\r\n            <Select name='Rarity Icons' shortName='rarityIcon' selectRef={rarityIconRef} onChange={e => setRarityIcon(cardOptionsState.cardOptions.rarityIcons.find((a: RarityIcon) => a.id === +e.currentTarget.value))}>\r\n              <option value={'none'}>{'None'}</option>\r\n              {cardOptionsState.cardOptions.rarityIcons.map((value: RarityIcon, i: number) =>\r\n                <option value={value.id} key={i}>{value.name}</option>\r\n              )}\r\n            </Select>\r\n            <Checkbox name='Custom Set Icon' shortName='customSetIcon' checked={hasCustomSetIcon} setter={setHasCustomSetIcon} />\r\n            {hasCustomSetIcon ?\r\n              <ImageInput shortName='customSetIcon' setter={setCustomSetIcon} />\r\n              :\r\n              <Select name='Set Icon' shortName='set' selectRef={setIconRef} onChange={e => setSet(cardOptionsState.cardOptions.sets.find((a: Set) => a.id === +e.currentTarget.value))}>\r\n                {cardOptionsState.cardOptions.sets.map((value: Set, i: number) =>\r\n                  <option value={value.id} key={i}>{value.name}</option>\r\n                )}\r\n              </Select>\r\n            }\r\n          </>}\r\n        </div>\r\n        {!(supertype === 'Energy' && type?.shortName !== 'Special') && <>\r\n          <div className={styles.seperator}>\r\n            <Input type='text' name='Name' shortName='name' value={name} setter={setName} />\r\n            {supertype === 'Pokemon' &&\r\n              <Input type='number' name='Hitpoints' shortName='hitpoints' value={hitpoints} setter={setHitpoints} min={0} max={999} />\r\n            }\r\n            {subtype?.hasPrevolve && <>\r\n              <Input type='text' name='Prevolve Name' shortName='prevolveName' value={prevolveName} setter={setPrevolveName} />\r\n              <ImageInput name='Prevolve Image' shortName='prevolveImage' setter={setPrevolveImage} />\r\n            </>}\r\n            {subtype?.hasPokedexEntry &&\r\n              <Input type='text' horizontal name='Pokédex Entry' shortName='pokedexEntry' value={pokedexEntry} setter={setPokedexEntry} />\r\n            }\r\n            {type?.hasSubname &&\r\n              <Input type='text' name='Subname' shortName='subname' value={subname} setter={setSubname} />\r\n            }\r\n          </div>\r\n          {supertype === 'Pokemon' && <>\r\n            <div className={styles.seperator}>\r\n              <Checkbox name='Has Ability' shortName='hasAbility' checked={hasAbility} setter={setHasAbility} />\r\n              {hasAbility && <>\r\n                <Input type='text' name='Ability Name' shortName='abilityName' value={abilityName} setter={setAbilityName} />\r\n                <Input type='textarea' name='Ability Text' shortName='abilityText' value={abilityText} setter={setAbilityText} />\r\n              </>}\r\n            </div>\r\n            <div className={styles.seperator}>\r\n              <Input type='text' name='Move Name' shortName='move1Name' value={move1Name} setter={setMove1Name} />\r\n              <Input type='text' name='Move Damage' shortName='move1Damage' value={move1Damage} setter={setMove1Damage} />\r\n              <Input type='textarea' horizontal name='Move Text' shortName='move1Text' value={move1Text} setter={setMove1Text} />\r\n              <EnergyPicker label={'Move Cost'} types={cardOptionsState.cardOptions.types} moveCost={move1Cost} setMoveCost={setMove1Cost} />\r\n            </div>\r\n            {!hasAbility &&\r\n              <div className={styles.seperator}>\r\n                <Checkbox name='Has Second Move' shortName='hasSecondMove' checked={hasSecondMove} setter={setHasSecondMove} />\r\n                {hasSecondMove && <>\r\n                  <Input type='text' name='Move Name' shortName='move2Name' value={move2Name} setter={setMove2Name} />\r\n                  <Input type='text' name='Move Damage' shortName='move2Damage' value={move2Damage} setter={setMove2Damage} />\r\n                  <Input type='textarea' name='Move Text' shortName='move2Text' value={move2Text} setter={setMove2Text} />\r\n                  <EnergyPicker label={'Move Cost'} types={cardOptionsState.cardOptions.types} moveCost={move2Cost} setMoveCost={setMove2Cost} />\r\n                </>}\r\n              </div>\r\n            }\r\n            <div className={styles.seperator}>\r\n              <Select name='Weakness Type' shortName='weaknessType' selectRef={weaknessTypeRef} onChange={e => setWeaknessType(cardOptionsState.cardOptions.types.find((a: Type) => a.id === +e.currentTarget.value))}>\r\n                {cardOptionsState.cardOptions.types.map((value: Type, i: number) => {\r\n                  if(supertype !== value.supertype) {\r\n                    return false;\r\n                  } else {\r\n                    return <option disabled={supertype !== value.supertype} value={value.id} key={i}>{value.name}</option>;\r\n                  }\r\n                })}\r\n              </Select>\r\n              <Input type='number' name='Weakness Amount' shortName='weaknessAmount' value={weaknessAmount} setter={setWeaknessAmount} max={99} min={0} />\r\n              <Select name='Resistance Type' shortName='resistanceType' selectRef={resistanceTypeRef} onChange={e => setResistanceType(cardOptionsState.cardOptions.types.find((a: Type) => a.id === +e.currentTarget.value))}>\r\n                <option value={'none'}>{'None'}</option>\r\n                {cardOptionsState.cardOptions.types.map((value: Type, i: number) => {\r\n                  if(supertype !== value.supertype) {\r\n                    return false;\r\n                  } else {\r\n                    return <option disabled={supertype !== value.supertype} value={value.id} key={i}>{value.name}</option>;\r\n                  }\r\n                })}\r\n              </Select>\r\n              {resistanceType &&\r\n                <Input type='number' name='Resistance Amount' shortName='resistanceAmount' value={resistanceAmount} setter={setResistanceAmount} max={99} min={0} />\r\n              }\r\n              <Input type='number' name='Retreat Cost' shortName='retreatCost' value={retreatCost} setter={setRetreatCost} max={5} min={0} />\r\n            </div>\r\n          </>}\r\n          {!subtype?.noDescription &&\r\n            <div className={styles.seperator}>\r\n              <Input type='textarea' name='Description' shortName='description' value={description} setter={setDescription} />\r\n            </div>\r\n          }\r\n          <div className={styles.seperator}>\r\n            {supertype !== 'Energy' &&\r\n              <Input type='text' name='Illustrator' shortName='illustrator' value={illustrator} setter={setIllustrator} />\r\n            }\r\n            <Input type='text' name='Card Number' shortName='cardNumber' value={cardNumber} setter={setCardNumber} />\r\n            <Input type='text' name='Total In Set' shortName='totalInSet' value={totalInSet} setter={setTotalInSet} />\r\n          </div>\r\n        </>}\r\n        <div className={styles.seperator}>\r\n          <span className={styles.info}>{'Card dimensions are 747w × 1038h'}</span>\r\n          {currentCropSetter &&\r\n            <>\r\n              <div className={styles.cropperWrapper}>\r\n                <Cropper\r\n                  image={cropImage}\r\n                  crop={cropArea}\r\n                  zoom={cropZoom}\r\n                  cropSize={{ width: 320, height: 444.66 }} // Based on aspect ratio\r\n                  maxZoom={100}\r\n                  minZoom={.1}\r\n                  restrictPosition={false}\r\n                  zoomSpeed={.1}\r\n                  aspect={747 / 1038}\r\n                  onCropChange={(location: Point) => setCropArea(location)}\r\n                  onCropComplete={async (croppedArea: Area, cap: Area) => setCroppedAreaPixels(cap)}\r\n                  onZoomChange={(newZoom: number) => setCropZoom(newZoom)}\r\n                />\r\n                <img alt='' src={getCardImage({baseSet: baseSet?.shortName, type: type?.shortName, rarity: rarity?.shortName, subtype: subtype?.shortName, supertype: supertype, variation: variation?.shortName})} className={styles.cropperImage} />\r\n              </div>\r\n              <button className={styles.button} onClick={async () => {\r\n                const croppedImage = await getCroppedImg(cropImage, croppedAreaPixels);\r\n                currentCropSetter && currentCropSetter(croppedImage);\r\n              }}>\r\n                {'Apply crop'}\r\n              </button>\r\n            </>\r\n          }\r\n          <ImageInput name='Background Image' shortName='backgroundImage' info='Placed behind everything'\r\n            setter={setBackgroundImage}\r\n            croppable cropperSetter={resetCropper}\r\n          />\r\n          <ImageInput name='Card Image' shortName='imageLayer1' info='Placed in front of background'\r\n            setter={setImageLayer1}\r\n            croppable cropperSetter={resetCropper}\r\n          />\r\n          <ImageInput name='Top Image' shortName='imageLayer2' info='Placed on top of the card image'\r\n            setter={setImageLayer2}\r\n            croppable cropperSetter={resetCropper}\r\n          />\r\n          {supertype === 'Energy' &&\r\n            <ImageInput name='Type Image' shortName='typeImage' info=\"The energy's top right icon\" setter={setTypeImage} />\r\n          }\r\n        </div>\r\n        <button className={styles.button} onClick={downloadCard}>{'Download as image'}</button>\r\n        <button className={styles.button} onClick={exportCard}>{'Export to clipboard'}</button>\r\n      </div>\r\n      <div className={styles.cardWrapper}>\r\n        <CardDisplay card={makeCard()} />\r\n        <div id='imagePreview' className={styles.cardImagePreview}></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: State) => ({ cardOptionsState: state.cardOptions });\r\nconst mapDispatchToProps = (dispatch: any) => bindActionCreators({ requestCardOptions }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardCreatorPage);\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport store from 'store';\r\nimport CardCreatorPage from 'pages/CardCreator';\r\nimport styles from './App.module.scss';\r\nimport { Switch, BrowserRouter as Router, Route, } from 'react-router-dom';\r\nimport card from './garbodor.json';\r\nimport { ImportedCard } from 'interfaces';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className={styles.wrapper}>\r\n        <header className={styles.header}>\r\n          <div className={styles.headerCircle} />\r\n        </header>\r\n        <div className={styles.content}>\r\n          <Router>\r\n            <Switch>\r\n              <Route exact path='/preset'>\r\n                <CardCreatorPage card={card as ImportedCard} />\r\n              </Route>\r\n              <Route path=''>\r\n                <CardCreatorPage />\r\n              </Route>\r\n            </Switch>\r\n          </Router>\r\n        </div>\r\n        <footer className={styles.footer} />\r\n      </div>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'styles/main.global.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CardCreator_wrapper__1xK8r\",\"form\":\"CardCreator_form__2CplI\",\"seperator\":\"CardCreator_seperator__1YR8e\",\"button\":\"CardCreator_button__2OfjR\",\"info\":\"CardCreator_info__2jpEw\",\"cardWrapper\":\"CardCreator_cardWrapper__2nTPg\",\"cardImagePreview\":\"CardCreator_cardImagePreview__n49nU\",\"cropperWrapper\":\"CardCreator_cropperWrapper__37W8W\",\"cropperImage\":\"CardCreator_cropperImage__1AZT-\"};"],"sourceRoot":""}